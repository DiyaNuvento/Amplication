/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailMap } from "./EmailMap";
import { EmailMapCountArgs } from "./EmailMapCountArgs";
import { EmailMapFindManyArgs } from "./EmailMapFindManyArgs";
import { EmailMapFindUniqueArgs } from "./EmailMapFindUniqueArgs";
import { CreateEmailMapArgs } from "./CreateEmailMapArgs";
import { UpdateEmailMapArgs } from "./UpdateEmailMapArgs";
import { DeleteEmailMapArgs } from "./DeleteEmailMapArgs";
import { Organization } from "../../organization/base/Organization";
import { EmailMapService } from "../emailMap.service";
@graphql.Resolver(() => EmailMap)
export class EmailMapResolverBase {
  constructor(protected readonly service: EmailMapService) {}

  async _emailMapsMeta(
    @graphql.Args() args: EmailMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailMap])
  async emailMaps(
    @graphql.Args() args: EmailMapFindManyArgs
  ): Promise<EmailMap[]> {
    return this.service.emailMaps(args);
  }

  @graphql.Query(() => EmailMap, { nullable: true })
  async emailMap(
    @graphql.Args() args: EmailMapFindUniqueArgs
  ): Promise<EmailMap | null> {
    const result = await this.service.emailMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailMap)
  async createEmailMap(
    @graphql.Args() args: CreateEmailMapArgs
  ): Promise<EmailMap> {
    return await this.service.createEmailMap({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => EmailMap)
  async updateEmailMap(
    @graphql.Args() args: UpdateEmailMapArgs
  ): Promise<EmailMap | null> {
    try {
      return await this.service.updateEmailMap({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailMap)
  async deleteEmailMap(
    @graphql.Args() args: DeleteEmailMapArgs
  ): Promise<EmailMap | null> {
    try {
      return await this.service.deleteEmailMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  async getOrganization(
    @graphql.Parent() parent: EmailMap
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
