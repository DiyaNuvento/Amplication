/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmailMap, // @ts-ignore
  Organization,
} from "@prisma/client";

export class EmailMapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.EmailMapCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailMapCountArgs>
  ): Promise<number> {
    return this.prisma.emailMap.count(args);
  }

  async emailMaps<T extends Prisma.EmailMapFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailMapFindManyArgs>
  ): Promise<EmailMap[]> {
    return this.prisma.emailMap.findMany(args);
  }
  async emailMap<T extends Prisma.EmailMapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailMapFindUniqueArgs>
  ): Promise<EmailMap | null> {
    return this.prisma.emailMap.findUnique(args);
  }
  async createEmailMap<T extends Prisma.EmailMapCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailMapCreateArgs>
  ): Promise<EmailMap> {
    return this.prisma.emailMap.create<T>(args);
  }
  async updateEmailMap<T extends Prisma.EmailMapUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailMapUpdateArgs>
  ): Promise<EmailMap> {
    return this.prisma.emailMap.update<T>(args);
  }
  async deleteEmailMap<T extends Prisma.EmailMapDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmailMapDeleteArgs>
  ): Promise<EmailMap> {
    return this.prisma.emailMap.delete(args);
  }

  async getOrganization(parentId: string): Promise<Organization | null> {
    return this.prisma.emailMap
      .findUnique({
        where: { id: parentId },
      })
      .organization();
  }
}
