/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Restore } from "./Restore";
import { RestoreCountArgs } from "./RestoreCountArgs";
import { RestoreFindManyArgs } from "./RestoreFindManyArgs";
import { RestoreFindUniqueArgs } from "./RestoreFindUniqueArgs";
import { CreateRestoreArgs } from "./CreateRestoreArgs";
import { UpdateRestoreArgs } from "./UpdateRestoreArgs";
import { DeleteRestoreArgs } from "./DeleteRestoreArgs";
import { Backup } from "../../backup/base/Backup";
import { User } from "../../user/base/User";
import { RestoreService } from "../restore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Restore)
export class RestoreResolverBase {
  constructor(
    protected readonly service: RestoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Restore",
    action: "read",
    possession: "any",
  })
  async _restoresMeta(
    @graphql.Args() args: RestoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Restore])
  @nestAccessControl.UseRoles({
    resource: "Restore",
    action: "read",
    possession: "any",
  })
  async restores(
    @graphql.Args() args: RestoreFindManyArgs
  ): Promise<Restore[]> {
    return this.service.restores(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Restore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Restore",
    action: "read",
    possession: "own",
  })
  async restore(
    @graphql.Args() args: RestoreFindUniqueArgs
  ): Promise<Restore | null> {
    const result = await this.service.restore(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Restore)
  @nestAccessControl.UseRoles({
    resource: "Restore",
    action: "create",
    possession: "any",
  })
  async createRestore(
    @graphql.Args() args: CreateRestoreArgs
  ): Promise<Restore> {
    return await this.service.createRestore({
      ...args,
      data: {
        ...args.data,

        backup: args.data.backup
          ? {
              connect: args.data.backup,
            }
          : undefined,

        createdBy: {
          connect: args.data.createdBy,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Restore)
  @nestAccessControl.UseRoles({
    resource: "Restore",
    action: "update",
    possession: "any",
  })
  async updateRestore(
    @graphql.Args() args: UpdateRestoreArgs
  ): Promise<Restore | null> {
    try {
      return await this.service.updateRestore({
        ...args,
        data: {
          ...args.data,

          backup: args.data.backup
            ? {
                connect: args.data.backup,
              }
            : undefined,

          createdBy: {
            connect: args.data.createdBy,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Restore)
  @nestAccessControl.UseRoles({
    resource: "Restore",
    action: "delete",
    possession: "any",
  })
  async deleteRestore(
    @graphql.Args() args: DeleteRestoreArgs
  ): Promise<Restore | null> {
    try {
      return await this.service.deleteRestore(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Backup, {
    nullable: true,
    name: "backup",
  })
  @nestAccessControl.UseRoles({
    resource: "Backup",
    action: "read",
    possession: "any",
  })
  async getBackup(@graphql.Parent() parent: Restore): Promise<Backup | null> {
    const result = await this.service.getBackup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "createdBy",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getCreatedBy(@graphql.Parent() parent: Restore): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
