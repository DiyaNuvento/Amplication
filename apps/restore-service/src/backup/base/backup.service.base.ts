/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Backup, // @ts-ignore
  Restore,
} from "@prisma/client";

export class BackupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BackupCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BackupCountArgs>
  ): Promise<number> {
    return this.prisma.backup.count(args);
  }

  async backups<T extends Prisma.BackupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BackupFindManyArgs>
  ): Promise<Backup[]> {
    return this.prisma.backup.findMany(args);
  }
  async backup<T extends Prisma.BackupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BackupFindUniqueArgs>
  ): Promise<Backup | null> {
    return this.prisma.backup.findUnique(args);
  }
  async createBackup<T extends Prisma.BackupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BackupCreateArgs>
  ): Promise<Backup> {
    return this.prisma.backup.create<T>(args);
  }
  async updateBackup<T extends Prisma.BackupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BackupUpdateArgs>
  ): Promise<Backup> {
    return this.prisma.backup.update<T>(args);
  }
  async deleteBackup<T extends Prisma.BackupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BackupDeleteArgs>
  ): Promise<Backup> {
    return this.prisma.backup.delete(args);
  }

  async findRestores(
    parentId: string,
    args: Prisma.RestoreFindManyArgs
  ): Promise<Restore[]> {
    return this.prisma.backup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .restores(args);
  }
}
